Bugs:
- \text
    - trying to test out if crossing out part of expression with the \cancel command is supported
    - this created a \text, doesn't appear to be supported
        - deleting the text it added seemed to put it in a weird state, couldn't move th cusor
        - on example page it shows the latex updating live, this was shown: \text{undefined}
        - also seems to have issues moving from the left into the text after clicking elsewhere


Learning JS Notes:
    - closure - a function that uses the context it was created in to access data
      or other functions
        - in javascript function scope is used for closures, as block scope does
          not exist
    - The global 'Object' is a function (remembvering that functions themselves
      are objects, just as numbers, strings, etc.)
        - Object.prtotype is the the root prototype
        - can 'Object' itself be used as a prototype?


Work on 1/9/2015
----------------
- brushing up on general JS concepts
- trying to figure out what exactly P.js provides
- debugging directly though the initialization of a mathquill element to
  try to understand what is goin on
- new task
    - acting purely as a consumer of MathQuill, with it as a black box,
      create an interface for editing an equation in a series of steps
    - use the built in MathQuill MathField construct to allow users to
      edit an expression and then hit a button to declare that they are
      moving on to the next 'step'
        - A MathField can easily be created by mathquill-ifying a span 
          with latex in it
    - Should be as simple as starting with a span, adding a button to export
      the latex in the current field and create a new one below it with this
      as the contents
    - put these fields in a div so that the last one can always be found to
      know where to copy from to create the next step
    - bonus
        - create an undo button (not for MathQuill itself, but to delete a step)
            - save the steps in the background to allow re-do
        - put the cursor back where it was
- got a little distracted looking at java projects again
    - it's hard to give up on a prototype, but the java community just isn't as
      active
        - and the editing experience with mathquill is just great
        - and it has lots of tests
        - might decide to go back to the java project someday, but for now I need
          to move on

Work on 1/10/2015
-----------------
- same task as before, make step by step editor by simply copying mathquill fields
- starter task
    - just programmaticlly generate a few MathFields, giving the latex as string
      literals in the JS, adding spans and mathquill-ifying them
        - time estimate 30 mins, complete time 10:30
        - actually completed, 10:15
    - create a button that will search the div for the last element, export latex from
      it and use it to generate a new mathfield
        - time estimate - 30 minutes, complete time 10:45
        - actually completed, 10:25
    - create a keyboard shortcut that will remove the need to click the button
        - maybe crtl-e for 'edit'?
        - should this be attached to all of the boxes to allow inserting a step below the current?
        - or should it just be a global key event that will always copy the last step?
        - time estimate 30 minutes, complete time 11
        - actually completed, 10:45
            - just did a global event for now
    - create a button and shortcut for undo
        - time estimate 30 minutes, complete time 11
        - finished, 11:15
            - small speeling error I was staring at in the debugger for a while "why is this undefied?!?!"
    - create redo button and keyboard shortcut
        - completed 11:45
    - create test video to show interface in action
        - fixed fraction navigation, enabled atuo commands for: sqrt, sum, etc.
        - time estimate 10 minutes, finish time - 12:05
        - actual complete time - 12:10
    - first version of the app is reasonably functional
    - lunch break
        - ~1 hour
    - noticed issue with copy-paste
        - was a problem with re-mathquillifying elements
            - this doesn't work
            - if I want to use mathquill methods, I need to keep track of
              the mathquill virtual dom versions along with the ones in the DOM
        - had to mess around with this for a while
            - finally just decided to keep a parallel array of all of the mq
              versions of each step as a parrallel array to the list in the DOM
        - finished 2pm
    - sporatically still seeing issues copying out of static math
        - seems to just be on firefox, chrome is fine
        - to reproduce, copy one section of static math expression and paste elsewhere
        - try copying a new selection and it will still pate the original selection
          copied first
    - also needed to manually mathquillify mathquill-static-math spans
        - old docs say this isn't necessary
            - the new ones have an example fragment that makes it seem like this should
              still work
    - resuming work 2:15
        - working on publishing a static version of the app for others to test
        - on gh-pages branch just published the source including the usually
          ignored 'build' directory to include the compiled MathQuill source
    - next task, button to generate new expression work spaces
        - remove globals, etc. described below
        - time estimate 30 minutes, expected complete time 3:45
        - took a bit longer than expected
            - had a few distractions
            - actual finsish time 6:10
        - strategy
            - all problem workspaces will be generated with jquery
                - the append method returns the dom element, I want to store this along
                  with the state needed for each dom element
                - whether everything is nested together or stored in pareallel lists
                  doesn't seem to matter much
            - at the global level, there will be a single array for all of the state
              managed for a list of problems
            - on page load, create the first problem workspace as a DOM element using
              jquery
                - this will just be a div to hold the divs for the controls and expression list 
                - create the control buttons
                    - what to bind these to?
                - create the expression list div and populate it with the first expression
                    - insert as a span
                    - mathquill it, save the mathquill object to a list of all current mq objects
                      inside of the object representing this problem
    - fixing keyboard shortcuts with multiple problems
        - took a little long, eventaully got it to work attaching the key listener
          to the div for a given problem rather than the individual text boxes
        - finish time 7:30
    - save functionality
        - offline save, no server
        - http://eligrey.com/demos/FileSaver.js/
        - total expected time 30 mins, expected completion 9:00
        
    - load save file
    - teacher grading
        - https://stuk.github.io/jszip/
     
    - possible next steps
        - allow for multiple problems to be completed on a single page
            - add a new problem button
            - remove use of globals
            - need to save an undo/redo history for each problem
            - keyboard shortcuts would need to be context specific
        - create save/load functionality
        - create basic teacher grading overview page loading a list of student "docs"
        - enable users to split the solution path
            - to solve for multiple answers
        - set up real environment for managin depedencies indepent of the app
